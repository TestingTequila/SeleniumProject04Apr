TDD: Test Driven Development
-JUnit & TestNG

  we no longer need main method to execute our code
  To run selective test cases
  To generate the report for tests executed
  To apply some pre & post conditions before or after executing your test case
  Don't wish to execute some test cases, from a bunch of test cases

  TestNG: 3a's
     -@annotations:  These are used to apply pre/post conditions over the test Cases represent using @Test annotations.
                     They are always used along with the methods

      @BeforeSuite   :This will be executed only once and that too before @BeforeTest
      @BeforeTest    :This will be executed only once and that too before @BeforeClass
      @BeforeClass   :This will be executed only once and that too before @BeforeMethod
      @BeforeMethod  :This will be executed before EVERY test case
      @Test          :This is used to represent your test case
      @AfterMethod   :This will be executed after EVERY test case
      @AfterClass    :This will be executed only once and that too after @AfterMethod
      @AfterTest     :This will be executed only once and that too after @AfterClass
      @AfterSuite    :This will be executed only once and that too after @AfterTest
      -------------------------------------
      @DataProvider
      @Parameter
      -----------------------------------------------------------------------------------------------------
     -attributes  : These are used to gain more control over the already automated test cases
                  : They are always used along with the annotations
       priority-> This defines the order of execution of Test Cases [NDP]
       enabled -> This is used to enable/disable any test case
       dependsOnMethods-> This is used to establish dependency of one TC over other
       alwaysRun->This will always  execute even if dependsOnMethod is failing
       invocationCount ->To execute a test case n number of time
       timeOut-> To see execution of a est case within given time frame
       groups ->This is for grouping of test cases
       dependsOnGroups->If any test case within the group fails, this will not execute


     -assertions  : These are used to validate the test Case/s
        Asset.Fail
        AssertTrue
        AssertFalse
        AssertEquals
        AssertNotEquals
        HardAssertions Vs SoftAssertions
        In HardAssertions, the code that we write after assertion will not execute if the assertion fails...
        In SoftAssertions, the code that we write after assertion will execute even if the assertion fails...

     -Xml in TestNg
